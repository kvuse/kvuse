import{_ as s,o as n,c as a,a as o}from"./app.27be988a.js";const F=JSON.parse('{"title":"Configurations","description":"","frontmatter":{},"headers":[{"level":3,"title":"Event Filters","slug":"event-filters","link":"#event-filters","children":[]},{"level":3,"title":"Reactive Timing","slug":"reactive-timing","link":"#reactive-timing","children":[]},{"level":3,"title":"Configurable Global Dependencies","slug":"configurable-global-dependencies","link":"#configurable-global-dependencies","children":[]}],"relativePath":"guide/config.md","lastUpdated":1655859557000}'),e={name:"guide/config.md"},l=o(`<h1 id="configurations" tabindex="-1">Configurations <a class="header-anchor" href="#configurations" aria-hidden="true">#</a></h1><p>These show the general configurations for most of the functions in VueUse.</p><h3 id="event-filters" tabindex="-1">Event Filters <a class="header-anchor" href="#event-filters" aria-hidden="true">#</a></h3><p>From v4.0, we provide the Event Filters system to give the flexibility to control when will events get triggered. For example, you can use <code>throttleFilter</code> and <code>debounceFilter</code> to control the event trigger rate:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">debounceFilter</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">throttleFilter</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">useLocalStorage</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">useMouse</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@vueuse/core</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">// changes will write to localStorage with a throttled 1s</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> storage </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useLocalStorage</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">my-key</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">foo</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">bar</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">eventFilter</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">throttleFilter</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">1000</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">// mouse position will be updated after mouse idle for 100ms</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> x</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> y </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useMouse</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">eventFilter</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">debounceFilter</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">100</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><p>Moreover, you can utilize <code>pausableFilter</code> to temporarily pause some events.</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">pausableFilter</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">useDeviceMotion</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@vueuse/core</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> motionControl </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">pausableFilter</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> motion </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useDeviceMotion</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">eventFilter</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> motionControl</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">eventFilter </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">motionControl</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">pause</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">// motion updates paused</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">motionControl</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">resume</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">// motion updates resumed</span></span>
<span class="line"></span></code></pre></div><h3 id="reactive-timing" tabindex="-1">Reactive Timing <a class="header-anchor" href="#reactive-timing" aria-hidden="true">#</a></h3><p>VueUse&#39;s functions follow Vue&#39;s reactivity system defaults for <a href="https://vuejs.org/guide/essentials/watchers.html#callback-flush-timing" target="_blank" rel="noreferrer">flush timing</a> where possible.</p><p>For <code>watch</code>-like composables (e.g. <code>pausableWatch</code>, <code>whenever</code>, <code>useStorage</code>, <code>useRefHistory</code>) the default is <code>{ flush: &#39;pre&#39; }</code>. Which means they will buffer invalidated effects and flush them asynchronously. This avoids unnecessary duplicate invocation when there are multiple state mutations happening in the same &quot;tick&quot;.</p><p>In the same way as with <code>watch</code>, VueUse allows you to configure the timing by passing the <code>flush</code> option:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> pause</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> resume </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">pausableWatch</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// Safely access updated DOM</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">flush</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">post</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><p><strong>flush option (default: <code>&#39;pre&#39;</code>)</strong></p><ul><li><code>&#39;pre&#39;</code>: buffers invalidated effects in the same &#39;tick&#39; and flushes them before rendering</li><li><code>&#39;post&#39;</code>: async like &#39;pre&#39; but fires after component updates so you can access the updated DOM</li><li><code>&#39;sync&#39;</code>: forces the effect to always trigger synchronously</li></ul><p><strong>Note:</strong> For <code>computed</code>-like composables (e.g. <code>syncRef</code>, <code>controlledComputed</code>), when flush timing is configurable, the default is changed to <code>{ flush: &#39;sync&#39; }</code> to align them with the way computed refs works in Vue.</p><h3 id="configurable-global-dependencies" tabindex="-1">Configurable Global Dependencies <a class="header-anchor" href="#configurable-global-dependencies" aria-hidden="true">#</a></h3><p>From v4.0, functions that access the browser APIs will provide an option fields for you to specify the global dependencies (e.g. <code>window</code>, <code>document</code> and <code>navigator</code>). It will use the global instance by default, so for most of the time, you don&#39;t need to worry about it. This configure is useful when working with iframes and testing environments.</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">// accessing parent context</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> parentMousePos </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useMouse</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">window</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> window</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">parent </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> iframe </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">querySelect</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">#my-iframe</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">// accessing child context</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> childMousePos </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useMouse</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">window</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> iframe</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">contextWindow </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">// testing</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> mockWindow </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">/* ... */</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> x</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> y </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useMouse</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">window</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> mockWindow </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div>`,19),p=[l];function t(c,r,i,y,D,C){return n(),a("div",null,p)}const d=s(e,[["render",t]]);export{F as __pageData,d as default};
